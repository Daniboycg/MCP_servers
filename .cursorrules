# MCP Servers - Contexto del Proyecto

## üåê Overview

Este es un repositorio centralizado para servidores MCP (Model Context Protocol) que permite a los modelos de lenguaje como Claude interactuar con herramientas y servicios externos. Cada servidor MCP en este repositorio proporciona capacidades espec√≠ficas, desde extracci√≥n de contenido web hasta operaciones en repositorios Git.

## üéØ Meta General

El objetivo principal es crear una colecci√≥n bien organizada de servidores MCP que puedan ser utilizados con Cursor para potenciar las capacidades de los modelos de lenguaje. Estos servidores permiten a Claude y otros LLMs realizar tareas que normalmente estar√≠an fuera de su alcance, como:

- Extraer y procesar contenido web (Firecrawl)
- Interactuar con navegadores web (Browser Tools)
- Gestionar contenedores Docker
- Crear flujos de trabajo automatizados (N8N)
- Interactuar con bases de datos (Supabase)
- Y mucho m√°s

## üìÇ Estructura por Responsabilidades

El proyecto sigue una arquitectura organizada por caracter√≠sticas, donde cada servidor MCP tiene su propio directorio con todos los componentes necesarios:

```
MCP_servers/
‚îú‚îÄ‚îÄ .cursor/              # Configuraci√≥n espec√≠fica de Cursor
‚îú‚îÄ‚îÄ Archon/               # Servidor MCP Archon
‚îú‚îÄ‚îÄ browser-tools-mcp/    # Herramientas para interactuar con navegadores
‚îú‚îÄ‚îÄ docker-mcp/           # Servidor MCP para Docker
‚îú‚îÄ‚îÄ firecrawl-mcp-server/ # Servidor para extracci√≥n web
‚îÇ   ‚îú‚îÄ‚îÄ scripts/          # Scripts para usar Firecrawl
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ scraper.py    # Script principal de extracci√≥n
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ simple_scraper.py # Versi√≥n simplificada
‚îú‚îÄ‚îÄ markdown_docs/        # Documentos extra√≠dos con Firecrawl
‚îú‚îÄ‚îÄ mcp-server-git-source/ # Servidor para operaciones Git
‚îú‚îÄ‚îÄ n8n-workflow-builder-mcp-server/ # Servidor para workflows
‚îú‚îÄ‚îÄ mcp.json              # Configuraci√≥n de servidores MCP
‚îî‚îÄ‚îÄ README.md             # Documentaci√≥n general
```

## üîß Servidores MCP Disponibles

### Firecrawl MCP
- **Prop√≥sito**: Extracci√≥n y procesamiento de contenido web
- **Capacidades**: Scraping, crawling, b√∫squeda, extracci√≥n, investigaci√≥n profunda
- **API Key**: Requerida (configurada en mcp.json)
- **Herramientas disponibles**:
  - firecrawl_scrape: Extrae contenido de una URL
  - firecrawl_map: Mapea la estructura de un sitio
  - firecrawl_crawl: Explora sistem√°ticamente un sitio web
  - firecrawl_batch_scrape: Extrae m√∫ltiples URLs en paralelo
  - firecrawl_check_batch_status: Verifica estado de extracciones por lotes
  - firecrawl_search: Busca informaci√≥n en la web
  - firecrawl_extract: Extrae datos espec√≠ficos de p√°ginas web
  - firecrawl_deep_research: Realiza investigaci√≥n profunda sobre un tema
  - firecrawl_generate_llmstxt: Genera formato optimizado para LLMs

### Browser Tools MCP
- **Prop√≥sito**: Interacci√≥n con navegadores web
- **Capacidades**: Tomar capturas, revisar logs, auditor√≠as web

### Supabase MCP
- **Prop√≥sito**: Interacci√≥n con bases de datos PostgreSQL
- **Capacidades**: Consultas SQL, gesti√≥n de datos

### Git MCP
- **Prop√≥sito**: Operaciones con repositorios Git
- **Capacidades**: Commits, branches, pull requests

### N8N Workflow Creator
- **Prop√≥sito**: Creaci√≥n y gesti√≥n de flujos de trabajo
- **Capacidades**: Automatizaci√≥n de tareas, integraci√≥n de servicios

### Archon
- **Prop√≥sito**: Servidor MCP adicional con capacidades avanzadas

## üíª Uso Com√∫n

### Configuraci√≥n de un Nuevo Servidor MCP en Cursor
1. Abrir Configuraci√≥n > Caracter√≠sticas > Servidores MCP
2. Agregar nuevo servidor MCP:
   - Nombre: nombre descriptivo
   - Tipo: "command"
   - Comando: comando espec√≠fico del servidor
   - Variables de entorno: si son necesarias

### Uso de Firecrawl desde Python
```python
from firecrawl import FirecrawlApp

app = FirecrawlApp(api_key='tu-api-key')
result = app.scrape_url('https://ejemplo.com')
with open('resultado.md', 'w') as f:
    f.write(result['markdown'])
```

## üîë Variables de Entorno Importantes
- `FIRECRAWL_API_KEY`: Clave de API para Firecrawl

## üìù Gu√≠as de Estilo y Mejores Pr√°cticas
- **Organizaci√≥n por caracter√≠sticas**: Cada servidor MCP tiene su propio directorio con todos sus componentes
- **M√≥dulos independientes**: Evitar dependencias innecesarias entre servidores
- **Documentaci√≥n clara**: Cada script debe incluir comentarios descriptivos
- **Principios SOLID**: Seguir principios de dise√±o s√≥lido, especialmente Responsabilidad √önica
- **DRY (Don't Repeat Yourself)**: Evitar duplicaci√≥n de c√≥digo
- **Manejo de errores robusto**: Incluir adecuado manejo de excepciones

## üöÄ Pr√≥ximos Pasos
- Asegurar que todos los servidores MCP est√©n correctamente configurados
- Documentar casos de uso espec√≠ficos para cada servidor
- Crear scripts de ejemplo para demostrar la integraci√≥n entre diferentes servidores
- Explorar nuevos servidores MCP que puedan a√±adir funcionalidades √∫tiles

## üìö Recursos y Documentaci√≥n
- [Documentaci√≥n oficial de MCP](https://docs.anthropic.com/en/docs/agents-and-tools/model-context-protocol-mcp)
- [Repositorio Firecrawl MCP](https://github.com/mendableai/firecrawl-mcp-server)
- [Cursor AI Settings](https://cursor.sh/docs/introduction/cursor-ai) 